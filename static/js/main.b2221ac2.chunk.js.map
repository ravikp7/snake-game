{"version":3,"sources":["components/GameOver.js","components/Gameplay.js","App.js","serviceWorker.js","index.js"],"names":["GameOver","this","props","show","react_default","a","createElement","className","onClick","resetHandler","Component","Gameplay","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","gameDimensions","state","activeBox","isDirectionHorizontal","isMovementPositive","isMoving","direction","snakeLength","snakePositions","score","currentFoodPosition","parseInt","Math","random","handleKeyPress","bind","assertThisInitialized","resetGame","document","addEventListener","_this2","setState","forceUpdate","event","key","nextProps","nextState","_this3","setTimeout","includes","push","length","shift","xCoordinate","yCoordinate","gridContainerStyle","display","gridTemplateColumns","concat","height","width","backgroundColor","margin","border","boxShadow","gridBoxStyle","borderRadius","activeBoxStyle","foodBoxStyle","style","onKeyPress","toConsumableArray","Array","map","_","i","objectSpread","GameOver_GameOver","App","Gameplay_Gameplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2221ac2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './gameOver.css';\n\nexport default class GameOver extends Component {\n\n    render () {\n        if (!this.props.show) return null;\n        return (\n            <div className=\"Over-Card\">\n                <div className=\"Card-Info\">\n                <div>Game Over!</div>\n                <button onClick={this.props.resetHandler} className=\"Reset-Button\">Reset Game</button>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport GameOver from './GameOver';\nimport \"./gameplay.css\";\n\nexport default class Gameplay extends Component {\n  constructor(props) {\n    super(props);\n    this.gameDimensions = 20; // n x n matrix\n    this.state = {\n      activeBox: 280,\n      isDirectionHorizontal: false, // true for Horizontal and false for Vertical\n      isMovementPositive: false, // true for one side and vice versa\n      isMoving: true,\n      direction: `up`,\n      snakeLength: 3,\n      snakePositions: [],\n      gameDimensions: this.gameDimensions,\n      score: 0,\n      currentFoodPosition: parseInt(Math.random()*this.gameDimensions*this.gameDimensions)\n    };\n\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  componentDidUpdate() {\n    //console.log(`updated`);\n  }\n\n  resetGame () {\n    this.setState(() => (\n      {\n        activeBox: 280,\n        isDirectionHorizontal: false, // true for Horizontal and false for Vertical\n        isMovementPositive: false, // true for one side and vice versa\n        isMoving: true,\n        direction: `up`,\n        snakeLength: 3,\n        snakePositions: [],\n        gameDimensions: this.gameDimensions,\n        score: 0,\n        currentFoodPosition: parseInt(Math.random()*this.gameDimensions*this.gameDimensions)\n      }\n    ));\n    this.forceUpdate();\n  }\n\n  handleKeyPress(event) {\n    const key = event.key;\n\n    if (\n      key === `ArrowUp` &&\n      this.state.direction !== `up` &&\n      this.state.direction !== `down`\n    ) {\n      this.setState(() => ({\n        isDirectionHorizontal: false,\n        isMovementPositive: false,\n        direction: `up`\n      }));\n    }\n    if (\n      key === `ArrowDown` &&\n      this.state.direction !== `down` &&\n      this.state.direction !== `up`\n    ) {\n      this.setState(() => ({\n        isDirectionHorizontal: false,\n        isMovementPositive: true,\n        direction: `down`\n      }));\n    }\n    if (\n      key === `ArrowLeft` &&\n      this.state.direction !== `left` &&\n      this.state.direction !== `right`\n    ) {\n      this.setState(() => ({\n        isDirectionHorizontal: true,\n        isMovementPositive: false,\n        direction: `left`\n      }));\n    }\n    if (\n      key === `ArrowRight` &&\n      this.state.direction !== `right` &&\n      this.state.direction !== `left`\n    ) {\n      this.setState(() => ({\n        isDirectionHorizontal: true,\n        isMovementPositive: true,\n        direction: `right`\n      }));\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.state.isDirectionHorizontal !== nextState.isDirectionHorizontal ||\n      this.state.isMovementPositive !== nextState.isMovementPositive\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  render() {\n    const gameplayAreaDimension = 650;\n    const delay = 100;\n\n    // If snake is moving\n    if (this.state.isMoving) {\n      setTimeout(() => {\n        this.setState(state => {\n\n          // Game Over when Snake touches itself\n          if (state.snakePositions.includes(state.activeBox)) {\n            return {\n              isMoving: false\n            };\n          }\n\n          // When Snake eats food\n          if (state.activeBox === state.currentFoodPosition) {\n            const foodPosition = parseInt(Math.random()*this.gameDimensions*this.gameDimensions);\n            return {\n              currentFoodPosition: foodPosition,\n              score: state.score + 1,\n              snakeLength: state.snakeLength + 1\n            };\n          }\n\n          // Fill Snake Positions according to length\n          const snakePositions = state.snakePositions;\n          snakePositions.push(state.activeBox);\n          if (snakePositions.length > state.snakeLength - 1)\n            snakePositions.shift();\n\n          // For Horizontal movement\n          if (state.isDirectionHorizontal) {\n            const xCoordinate = state.activeBox % state.gameDimensions; // Between 0 and this.state.gameDimensions-1\n            // For Moving Right\n            if (state.isMovementPositive && xCoordinate < state.gameDimensions - 1) {\n              return {\n                activeBox: state.activeBox + 1,\n                snakePositions: snakePositions\n              };\n            }\n            // For Moving Left\n            else if (!state.isMovementPositive && xCoordinate > 0) {\n              return {\n                activeBox: state.activeBox - 1,\n                snakePositions: snakePositions\n              };\n            }\n            else return {\n              isMoving: false\n            }\n          }\n          // For Vertical movement\n          else {\n            const yCoordinate = parseInt(state.activeBox / state.gameDimensions); // Between 0 and this.state.gameDimensions-1\n            // For Moving Up\n            if (state.isMovementPositive && yCoordinate < state.gameDimensions - 1) {\n              return {\n                activeBox: state.activeBox + state.gameDimensions,\n                snakePositions: snakePositions\n              };\n            }\n            // For Moving Down\n            else if (!state.isMovementPositive && yCoordinate > 0) {\n              return {\n                activeBox: state.activeBox - state.gameDimensions,\n                snakePositions: snakePositions\n              };\n            }\n            else return {\n              isMoving: false\n            }\n          }\n        });\n      }, delay);\n    }\n\n    const gridContainerStyle = {\n      display: `grid`,\n      gridTemplateColumns: `repeat(${this.state.gameDimensions}, auto [col-start])`,\n      height: `${gameplayAreaDimension}px`,\n      width: `${gameplayAreaDimension}px`,\n      backgroundColor: `greenyellow`,\n      margin: `0 auto`,\n      border: `5px solid #282c34`,\n      boxShadow: `inset 0 0 10px #000000`,\n    };\n\n    const gridBoxStyle = {\n      height: `${gameplayAreaDimension / this.state.gameDimensions}px`,\n      width: `${gameplayAreaDimension / this.state.gameDimensions}px`,\n      border: `0px solid`,\n      borderRadius: `10px`\n    };\n\n    const activeBoxStyle = {\n      backgroundColor: `green`\n    };\n\n    const foodBoxStyle = {\n      backgroundColor: `red`,\n      borderRadius: `50%`\n    };\n\n    return (\n      <div className=\"Game-Board\">\n      <div className=\"Score-Board\">\n          SCORE: {this.state.score}\n      </div>\n      <div\n        className=\"Game-Grid-Container\"\n        style={gridContainerStyle}\n        onKeyPress={this.handleKeyPress}\n      >\n        \n        {[...Array(this.state.gameDimensions * this.state.gameDimensions)].map((_, i) => {\n          return (\n            <div\n              className=\"Grid-Box\"\n              style={\n                this.state.snakePositions.includes(i) ||\n                i === this.state.activeBox\n                  ? { ...activeBoxStyle, ...gridBoxStyle }\n                  : (i === this.state.currentFoodPosition)? {  ...gridBoxStyle, ...foodBoxStyle }\n                  : gridBoxStyle\n              }\n              key={i}\n            >\n              {/*i % this.state.gameDimensions}, {parseInt(i / this.state.gameDimensions)*/}\n            </div>\n          );\n        })}\n\n        <GameOver show={!this.state.isMoving} resetHandler={this.resetGame} />\n      </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Gameplay from './components/Gameplay';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <Gameplay />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}